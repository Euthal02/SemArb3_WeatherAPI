name: Deploy the Backend Flask App

on:
  push:
    # this means that the workflow will only trigger if there are changes in this directory
    paths:
      - 'backend/**'
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow one concurrent deployment
concurrency:
  group: "backend"
  cancel-in-progress: true

jobs:
  test-job:
    environment: backend_env_vars
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12.2
      
      - name: Install dependencies
        run: |
          pip install -r backend/requirements.txt
          pip install pytest
        
      - name: Run unit tests
        run: |
          echo "Running unit tests... This will take about 60 seconds."
          python -m pytest

  build-job:
    runs-on: ubuntu-latest
    needs: test-job
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to GitHub Container registry
        uses: docker/login-action@v1
        env:
          GITHUB_USER: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          registry: ghcr.io
          username: $GITHUB_USER
          password: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Build and push Docker image
        run: |
          docker build -t ghcr.io/euthal02/semarb3_weatherapi:latest -f backend/Dockerfile.prod .
          docker push ghcr.io/euthal02/semarb3_weatherapi:latest

  deploy-job:
    runs-on: ubuntu-latest
    environment: backend_env_vars
    needs: build-job
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        shell: bash
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create .env file
        run: |
          touch .env
          echo API_KEY=${{ secrets.API_KEY }} >> .env
          echo ASSISTANT_ID=${{ secrets.ASSISTANT_ID }} >> .env
          echo ORGANIZATION=${{ secrets.ORGANIZATION }} >> .env
          echo PROJECT=${{ secrets.PROJECT }} >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          echo DASHBOARD_ENABLED=${{ vars.DASHBOARD_ENABLED }} >> .env
          echo DATABASE_URI=${{ vars.DATABASE_URI }} >> .env

      - name: Copy files to Server
        run: |
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -q backend/compose.prod.yaml ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }}:/home/${{ vars.DEPLOY_USER }}/compose.yaml
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -q .env ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }}:/home/${{ vars.DEPLOY_USER }}/.env

      - name: Connect to server
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }}
          cd /home/${{ vars.DEPLOY_USER }};

      - name: Login to GitHub Container registry
        uses: docker/login-action@v1
        env:
          GITHUB_USER: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          registry: ghcr.io
          username: $GITHUB_USER
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy Containers to server
        run: |
          docker-compose pull;
          docker-compose up -d"
